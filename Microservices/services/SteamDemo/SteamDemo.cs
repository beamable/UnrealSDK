using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api.Stats;
using Beamable.Server;
using Beamable.Server.Api.RealmConfig;
using Newtonsoft.Json;
using UnityEngine;

namespace Beamable.SteamDemo
{
    [FederationId("default")]
    public class DefaultPlayerInitId : IFederationId;

    [FederationId("steam")]
    public class SteamId : IFederationId;

    [Microservice("SteamDemo")]
    public partial class SteamDemo : Microservice, IFederatedPlayerInit<DefaultPlayerInitId>, IFederatedLogin<SteamId>
    {
        private const string BaseUri = "https://partner.steam-api.com";
        private const string AuthenticateUserTicketUri = BaseUri + "/ISteamUserAuth/AuthenticateUserTicket/v1";
        private const string GetPlayerSummariesUri = BaseUri + "/ISteamUser/GetPlayerSummaries/v2";

        [InitializeServices]
        public static async Task Initialize(IServiceInitializer initializer)
        {
            try
            {
                var realmConfigService = initializer.GetService<IMicroserviceRealmConfigService>();
                var config = await realmConfigService.GetRealmConfigSettings();
                var appId = config.GetSetting("steam", "appid", string.Empty);
                if (string.IsNullOrWhiteSpace(appId))
                {
                    throw new MicroserviceException((int)HttpStatusCode.BadRequest, "ConfigurationError",
                        "steam.appid is not defined in realm config. Please apply the configuration and restart the service to make it operational.");
                }

                var publisherToken = config.GetSetting("steam", "key", string.Empty);
                if (string.IsNullOrWhiteSpace(publisherToken))
                {
                    throw new MicroserviceException((int)HttpStatusCode.BadRequest, "ConfigurationError",
                        "steam.key is not defined in realm config. Please apply the configuration and restart the service to make it operational.");
                }
            }
            catch (Exception ex)
            {
                BeamableLogger.LogException(ex);
                BeamableLogger.LogError("Service initialization failed. Please fix the issues before using the service.");
            }
        }


        public async Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
        {
            BeamableLogger.Log("Initializing player account");

            var realmSettings = await Services.RealmConfig.GetRealmConfigSettings();
            var publisherToken = realmSettings.GetSetting("steam", "key");

            var client = new HttpClient();
            foreach (var externalIdentity in account.external)
            {
                if (externalIdentity.providerNamespace == "steam")
                {
                    var uri = BuildGetPlayerSummariesUri(publisherToken, new[] { externalIdentity.userId });
                    var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Get, uri));
                    if (response.IsSuccessStatusCode)
                    {
                        var responseBody = await response.Content.ReadAsStringAsync();
                        try
                        {
                            var playerSummary = JsonConvert.DeserializeObject<SteamGetPlayerSummaryResponse>(responseBody);

                            var p = playerSummary.response.Players.FirstOrDefault();
                            if (p == null)
                            {
                                throw new MicroserviceException(404,
                                    "INVALID_STEAM_USER_ID",
                                    "Failed to find steam user associated with this account. You should never see this. If you do, you likely have a bug in your steam federation.");
                            }

                            var stats = new Dictionary<string, string>()
                            {
                                { "steam_demo.username", p.personaname },
                                { "steam_demo.avatar", p.avatar },
                                { "steam_demo.avatar_medium", p.avatarmedium },
                                { "steam_demo.avatar_full", p.avatarfull },
                            };

                            // Set some beamable stats from the user's steam profile
                            var realmGamerTag = account.gamerTags.First(g => g.projectId == Context.Pid).gamerTag;
                            await Services.Stats.SetStats(StatsDomainType.Client, StatsAccessType.Public, realmGamerTag, stats);

                            return new PlayerInitResult() { result = "" };
                        }
                        catch (Exception)
                        {
                            throw new MicroserviceException(500, "PlayerInitError", "Failed to deserialize response from Steam.");
                        }
                    }

                    Debug.Log($"Failed request, {response.StatusCode}: {response.RequestMessage}");
                    throw new MicroserviceException((int)response.StatusCode, "PlayerInitError", 
                        $"Failed to connect to Steam: {response.ReasonPhrase}. ExternalID={externalIdentity.userId}");
                }
            }

            return new PlayerInitResult() { result = "" };
        }

        public async Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
        {
            BeamableLogger.Log("Request for authentication started");
            var realmSettings = await Services.RealmConfig.GetRealmConfigSettings();

            var publisherToken = realmSettings.GetSetting("steam", "key");
            var appId = realmSettings.GetSetting("steam", "appid");

            var uri = BuildAuthenticateUri(token, publisherToken, appId);

            var client = new HttpClient();
            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Get, uri));
            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                try
                {
                    var ticket = JsonConvert.DeserializeObject<SteamAuthenticateUserTicket>(responseBody);
                    return new FederatedAuthenticationResponse { user_id = ticket.response.ResponseParams.steamid, };
                }
                catch (Exception)
                {
                    throw new MicroserviceException(500, "AuthenticationError",
                        "Failed to deserialize response from Steam.");
                }
            }

            Debug.Log($"Failed request, {response.StatusCode}: {response.RequestMessage}");

            throw new MicroserviceException((int)response.StatusCode, "AuthenticationError",
                $"Failed to connect to Steam: {response.ReasonPhrase}");
        }

        private static string BuildAuthenticateUri(string ticket, string publisherToken, string appId)
        {
            return $"{AuthenticateUserTicketUri}/?key={publisherToken}&appid={appId}&ticket={ticket}";
        }

        private static string BuildGetPlayerSummariesUri(string publisherToken, string[] userIds)
        {
            return $"{GetPlayerSummariesUri}/?key={publisherToken}&steamids={string.Join(",", userIds)}";
        }
    }

    [Serializable]
    public class SteamAuthenticateUserTicket
    {
        public SteamResponse response { get; set; }
    }

    [Serializable]
    public class SteamResponse
    {
        [JsonProperty(PropertyName = "params")]
        public SteamResponseParams ResponseParams { get; set; }
    }

    [Serializable]
    public class SteamResponseParams
    {
        public string result { get; set; }
        public string steamid { get; set; }
        public string ownersteamid { get; set; }
        public bool vacbanned { get; set; }
        public bool publisherbanned { get; set; }
    }

    [Serializable]
    public class SteamGetPlayerSummaryResponse
    {
        public Body response { get; set; }


        [Serializable]
        public class Body
        {
            [JsonProperty(PropertyName = "players")]
            public Player[] Players { get; set; }
        }
        
        [Serializable]
        public class Player
        {
            public string steamid { get; set; }
            public string personaname { get; set; }
            public string avatar { get; set; }
            public string avatarmedium { get; set; }
            public string avatarfull { get; set; }
        }
    }
}