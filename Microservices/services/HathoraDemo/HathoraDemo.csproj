<Project Sdk="Microsoft.NET.Sdk">
    <!--  Settings for Beamable Build  -->
    <PropertyGroup>
        <!-- The tool path for the beamCLI. "dotnet beam" will refer to the local project tool, and "beam" would install to a globally installed tool -->
        <BeamableTool>$(BEAM_PATH)</BeamableTool>
        <BeamableTool Condition="'$(BeamableTool)' == ''">beam</BeamableTool>

        <!-- All Microservices must have the value, "service" -->
        <BeamProjectType>service</BeamProjectType>

        <!-- When "true", this will auto-generate client code to any linked unity projects -->
        <GenerateClientCode>true</GenerateClientCode>
    </PropertyGroup>

    <PropertyGroup Condition="$(DOTNET_RUNNING_IN_CONTAINER)!=true">
        <DefineConstants>$(DefineConstants);BEAMABLE_GENERATE_ENV</DefineConstants>
    </PropertyGroup>

    <!-- Standard dotnet settings-->
    <PropertyGroup>
        <OutputType>Exe</OutputType>

        <!-- As of Beamable 1.0, net6.0 is required. -->
        <TargetFramework>net6.0</TargetFramework>
        <!-- Advanced C# Features are disabled by default. The Unity SDK does not support these features. 
             If you enable them, it will be harder to copy/paste code between the service and Unity. -->
        <ImplicitUsings>disable</ImplicitUsings>
        <Nullable>disable</Nullable>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>

        <!-- Warning 1591 is about missing XML comments on methods. Beamable suggests disabling this warning. 
             https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1591 -->
        <NoWarn>1591</NoWarn>

        <!-- The autogenerated OpenAPI page will use the generated serviceDocs.xml file to handle 
             API descriptions. The OpenAPI page will break if there is no `serviceDocs.xml` file. -->
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
    </PropertyGroup>

    <!-- After the build completes, we should auto-generate client code to any linked projects -->
    <Target Name="generate-client" AfterTargets="Build" Condition="$(GenerateClientCode)==true AND $(DOTNET_RUNNING_IN_CONTAINER)!=true">
        <Message Text="Generating client files..." Importance="high"/>
        <Exec Command="$(BeamableTool) project generate-client $(OutDir)/$(AssemblyName).dll --output-links"/>
    </Target>

    <!-- Before starting the build, we need to prepare a few files and an .env file to pass startup information to the service -->
    <Target Name="setup-beamable" BeforeTargets="Build" DependsOnTargets="RunResolvePackageDependencies" Condition="$(DOTNET_RUNNING_IN_CONTAINER)!=true">

        <PropertyGroup>
            <BeamableVersion>@(BeamablePackage->'%(Version)')</BeamableVersion>
        </PropertyGroup>

        <!-- We need a file that lets the runtime know what version of Beamable it was built with... -->
        <Message Text="Creating beamable version file..." Importance="high"/>
        <WriteLinesToFile File="$(OutDir)/.beamablesdkversion" Lines="$(BeamableVersion)" Overwrite="true"/>
    </Target>

    <!-- When running in a container, before building, we need to prepare a few files -->
    <Target Name="docker-setup-beamable" BeforeTargets="Build" DependsOnTargets="RunResolvePackageDependencies" Condition="$(DOTNET_RUNNING_IN_CONTAINER)==true">

        <PropertyGroup>
            <BeamableVersion>@(BeamablePackage->'%(Version)')</BeamableVersion>
        </PropertyGroup>
        <Message Text="Generating files..." Importance="high"/>
        <WriteLinesToFile File="$(PublishDir)/.beamablesdkversion" Lines="$(BeamableVersion)" Overwrite="true"/>
        <WriteLinesToFile File="$(PublishDir)/.env" Lines="BEAMABLE_SDK_VERSION_EXECUTION=$(BeamableVersion)" Overwrite="true"/>
    </Target>

    <!-- Nuget references -->
    <ItemGroup>
        <!-- 
        BEAMABLE DEVELOPERS: This is how we reference samples when we are developing them. 
        This makes it so that, if we have a locally built package set up, we use that one. Otherwise, we use the version below.
        
        GAME-MAKERS: You don't need to care about this and if you want to reference packages in your own projects, you can just do it normally.
        <PackageReference Include="Beamable.Common" Version="2.0.0" />     
        -->
        
        <PackageReference Include="Beamable.Microservice.Runtime" Condition="Exists('../../../BeamableSource/Beamable.Microservice.Runtime.0.0.123.nupkg')" Version="0.0.123"/>
        <PackageReference Include="Beamable.Microservice.Runtime" Condition="!Exists('../../../BeamableSource/Beamable.Microservice.Runtime.0.0.123.nupkg')" Version="2.0.2"/>
        
        <PackageReference Include="EmbedIO" Version="3.4.*"/>
        <PackageReference Include="LoxSmoke.DocXml" Version="3.4.*"/>
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="6.0.0-preview.6.21352.12"/>
        <PackageReference Include="Microsoft.OpenApi" Version="1.6.3"/>
        <PackageReference Include="Microsoft.OpenApi.Readers" Version="1.3.2"/>
        <PackageReference Include="NetMQ" Version="4.0.1.11"/>
        <PackageReference Include="Newtonsoft.Json" Version="13.0.*"/>
        <PackageReference Include="Serilog" Version="2.10.*"/>
        <PackageReference Include="Serilog.Formatting.Compact" Version="1.1.*"/>
        <PackageReference Include="Serilog.Sinks.Console" Version="3.1.*"/>
        <PackageReference Include="System.CommandLine" Version="2.0.0-beta3.22114.*"/>
        <PackageReference Include="System.ServiceModel.Primitives" Version="4.9.*"/>
        <PackageReference Include="System.Threading.RateLimiting" Version="7.0.0"/>
    </ItemGroup>

</Project>
