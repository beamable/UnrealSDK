using System;
using System.Text.Json;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.SuiFederation.Features.Notifications.Models;

namespace Beamable.SuiFederation.Features.Notifications;

public class PlayerNotificationService : IService
{
    private readonly IBeamableRequester _beamableRequester;
    private readonly JsonSerializerOptions _options = new();

    public PlayerNotificationService(IBeamableRequester beamableRequester)
    {
        _beamableRequester = beamableRequester;
        _options.Converters.Add(new NotificationConverter());
    }

    public async Task SendPlayerNotification(long gamerTag, IPlayerNotification payload)
    {
        try
        {
            var message = JsonSerializer.Serialize(payload, _options);
            var request = new
            {
                dbid = gamerTag,
                payload = new
                {
                    context = payload.Context,
                    messageFull = message
                }
            };
            await _beamableRequester.Request<CommonResponse>(Method.POST, "/basic/notification/player", JsonSerializer.Serialize(request), includeAuthHeader: false);
        }
        catch (Exception)
        {
            BeamableLogger.LogWarning($"Unable to send player {gamerTag} notification.");
        }
    }
}