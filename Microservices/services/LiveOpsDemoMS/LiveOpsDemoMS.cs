using Beamable.Common.Api.Inventory;
using Beamable.Common.Inventory;
using Beamable.Server;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;
using System.Linq;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api.Stats;

namespace Beamable.LiveOpsDemoMS
{
    [FederationId("default")]
    public class DefaultPlayerInit : IFederationId;

    [Microservice("LiveOpsDemoMS")]
    public class LiveOpsDemoMS : Microservice, IFederatedPlayerInit<DefaultPlayerInit>
    {
        const string PlaySampleStatID = "my_sample_stat";
        const string SampleItemID = "items.sample_item";


        public async Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
        {
            // Get the gamertag for the user in this realm.
            var gamerTagInRealm = account.gamerTags.First(a => a.projectId == Context.Pid).gamerTag;

            var user = AssumeNewUser(gamerTagInRealm);
            
            //Add 3 sample items with level 1
            var updateBuilder = new InventoryUpdateBuilder();
            var itemProperties = new Dictionary<string, string>
            {
                { "itemlevel", "1" }
            };

            //Add 3 instances of the sample item
            updateBuilder.AddItem(SampleItemID, itemProperties);
            updateBuilder.AddItem(SampleItemID, itemProperties);
            updateBuilder.AddItem(SampleItemID, itemProperties);

            // Update the player's inventory to grant these items.
            await user.Services.Inventory.Update(updateBuilder);

            //Set the initial sample stat to be 1
            await user.Services.Stats.SetStat(StatsDomainType.Game, StatsAccessType.Private, gamerTagInRealm, PlaySampleStatID, "1");

            // Return an ok result
            return new PlayerInitResult() { result = "" };
        }


        /// <summary>
        /// Upgrades the given item inside the given player's inventory. 
        /// </summary>
        [ClientCallable]
        public async Task<bool> UpgradeItem(long gamerTag, long itemInstaceID)
        {
            var items = await Services.Inventory.GetItems<ItemContent>();

            var itemToUpdate = items.FirstOrDefault(i => i.Id == itemInstaceID);
            if (itemToUpdate == null) throw new MicroserviceException(404, $"ITEM_NOT_FOUND", $"Item instance with the given id was not found in the inventory. ID={itemInstaceID}, GAMERTAG={gamerTag}");

            var updateBuilder = new InventoryUpdateBuilder();
            if (itemToUpdate.Properties.ContainsKey("itemlevel"))
            {
                int itemLevel = int.Parse(itemToUpdate.Properties["itemlevel"]);
                itemLevel++;

                itemToUpdate.Properties["itemlevel"] = itemLevel.ToString();

                updateBuilder.UpdateItem(itemToUpdate.ItemContent.Id, itemToUpdate.Id, itemToUpdate.Properties);
            }

            await Services.Inventory.Update(updateBuilder);
            return true;
        }

        /// <summary>
        /// Increments the player's stat.
        /// </summary>
        [ClientCallable]
        public async Task<bool> IncrementStat(long gamerTag)
        {
            var playerStat = await Services.Stats.GetStat(StatsDomainType.Game, StatsAccessType.Private, gamerTag, PlaySampleStatID);

            if (!int.TryParse(playerStat, out var newStatValue))
                throw new MicroserviceException(500,
                    "INVALID_STAT_TYPE",
                    $"This stats has an un-parseable value. It should be a number. Please investigate. GAMERTAG={gamerTag}, STAT={PlaySampleStatID}, STAT_VAL={playerStat}");

            newStatValue++;
            playerStat = newStatValue.ToString();
            await Services.Stats.SetStat(StatsDomainType.Game, StatsAccessType.Private, gamerTag, PlaySampleStatID, playerStat);
            return true;
        }

        /// <summary>
        /// Gets the value for the <see cref="PlaySampleStatID"/> stat.
        /// </summary>
        [ClientCallable]
        public async Task<int> GetSampleStat(long gamerTag)
        {
            var playerStat = await Services.Stats.GetStat(StatsDomainType.Game, StatsAccessType.Private, gamerTag, PlaySampleStatID);
            if (!int.TryParse(playerStat, out var statValue))
                throw new MicroserviceException(500,
                    "INVALID_STAT_TYPE",
                    $"This stats has an un-parseable value. It should be a number. Please investigate. GAMERTAG={gamerTag}, STAT={PlaySampleStatID}, STAT_VAL={playerStat}");


            return statValue;
        }
    }
}