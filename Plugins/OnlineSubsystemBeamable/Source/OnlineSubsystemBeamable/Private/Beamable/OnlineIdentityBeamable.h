#pragma once

#include "CoreMinimal.h"
#include "OnlineSubsystemTypes.h"
#include "Beamable/OnlineSubsystemBeamableTypes.h"
#include "AutoGen/AccountPlayerView.h"
#include "AutoGen/TokenResponse.h"
#include "AutoGen/SubSystems/Accounts/BasicAccountsGetMeRequest.h"
#include "AutoGen/SubSystems/Auth/AuthenticateRequest.h"
#include "AutoGen/SubSystems/Stats/GetClientRequest.h"
#include "AutoGen/SubSystems/Stats/GetStatsRequest.h"
#include "Interfaces/OnlineIdentityInterface.h"
#include "Runtime/BeamRuntime.h"

struct FBeamOperationEvent;
class FOnlineSubsystemBeamable;


/**
 * Info associated with an user account generated by this online service
 *
 * INFO: No function call here EVER GOES AND TALKS TO THE NETWORK!!! 
 */
class FUserOnlineAccountBeamable : public FUserOnlineAccount
{
public:
	FUserSlot CurrentSlot;
	FBeamRealmUser BeamUser;
	FString LoginType;

	// FOnlineUser	
	virtual FUniqueNetIdRef GetUserId() const override { return UserIdPtr; }
	virtual FString GetRealName() const override;
	virtual FString GetDisplayName(const FString& Platform = FString()) const override;
	virtual bool GetUserAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	virtual bool SetUserAttribute(const FString& AttrName, const FString& AttrValue) override;

	// FUserOnlineAccount
	virtual FString GetAccessToken() const override { return BeamUser.AuthToken.AccessToken; }
	virtual bool GetAuthAttribute(const FString& AttrName, FString& OutAttrValue) const override;

	// FUserOnlineAccountBeamable

	FUserOnlineAccountBeamable(FBeamRealmUser InUser, FUserSlot Slot, FString AccountType) : UserIdPtr(FUniqueNetIdBeamable::Create(InUser.GamerTag.AsString))
	{
		LoginType = AccountType;
		CurrentSlot = Slot;
		BeamUser = InUser;
		UserAttributes.Add(USER_ATTR_ID, InUser.GamerTag.AsString);
		UserAttributes.Add(USER_ATTR_EMAIL, InUser.Email);
	}

	virtual ~FUserOnlineAccountBeamable()
	{
	}

	/** User Id represented as a FUniqueNetId */
	FUniqueNetIdRef UserIdPtr;

	/** Additional key/value pair data related to auth */
	TMap<FString, FString> AdditionalAuthData;
	/** Additional key/value pair data related to user attribution */
	TMap<FString, FString> UserAttributes;
};


DEFINE_BEAM_OPERATION_HOOK_TwoParams(FOnBeamableReadyIdentityHook, FUserSlot, TSharedPtr<FUserOnlineAccountBeamable>)


/**
 * Beamable service implementation of the online identity interface
 */
class FOnlineIdentityBeamable : public IOnlineIdentity
{
public:
	/**
	 * Constructor
	 *
	 * @param InSubsystem online subsystem being used
	 */
	FOnlineIdentityBeamable(FOnlineSubsystemBeamable* InSubsystem);

	/**
	 * Destructor
	 */
	virtual ~FOnlineIdentityBeamable();

	// IOnlineIdentity - Async	
	virtual bool Login(int32 LocalUserNum, const FOnlineAccountCredentials& AccountCredentials) override;
	virtual bool Logout(int32 LocalUserNum) override;
	virtual bool AutoLogin(int32 LocalUserNum) override;
	virtual void RevokeAuthToken(const FUniqueNetId& UserId, const FOnRevokeAuthTokenCompleteDelegate& Delegate) override;
	virtual void GetUserPrivilege(const FUniqueNetId& UserId, EUserPrivileges::Type Privilege, const FOnGetUserPrivilegeCompleteDelegate& Delegate, EShowPrivilegeResolveUI ShowResolveUI) override;

	// IOnlineIdentity - Locally Cached Sync Calls
	virtual TSharedPtr<FUserOnlineAccount> GetUserAccount(const FUniqueNetId& UserId) const override;
	virtual TArray<TSharedPtr<FUserOnlineAccount>> GetAllUserAccounts() const override;
	virtual FUniqueNetIdPtr GetUniquePlayerId(int32 LocalUserNum) const override;
	virtual FUniqueNetIdPtr CreateUniquePlayerId(uint8* Bytes, int32 Size) override;
	virtual FUniqueNetIdPtr CreateUniquePlayerId(const FString& Str) override;
	virtual ELoginStatus::Type GetLoginStatus(int32 LocalUserNum) const override;
	virtual ELoginStatus::Type GetLoginStatus(const FUniqueNetId& UserId) const override;
	virtual FString GetPlayerNickname(int32 LocalUserNum) const override;
	virtual FString GetPlayerNickname(const FUniqueNetId& UserId) const override;
	virtual FString GetAuthToken(int32 LocalUserNum) const override;
	virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) const override;
	virtual FString GetAuthType() const override;

	// FOnlineIdentityBeamable
	virtual TSharedPtr<FUserOnlineAccountBeamable> GetUserAccountBeamable(const FUniqueNetId& UserId) const;	
	const TUniqueNetIdMap<TSharedRef<FUserOnlineAccountBeamable>> GetBeamableUsers() const;
	const FUniqueNetIdPtr GetBeamableUser(FUserSlot) const;
	
private:
	/**
	 * Should use the initialization constructor instead
	 */
	FOnlineIdentityBeamable() = delete;

	/** Cached pointer to owning subsystem */
	FOnlineSubsystemBeamable* BeamableSubsystem;

	/** Ids mapped to Beamable User Slots */
	TMap<FUniqueNetIdPtr, FUserSlot> UserIdToSlot;

	/** Beamable User Slots mapped to Ids */
	TMap<FUserSlot, FUniqueNetIdPtr> SlotToUserId;

	/** Ids mapped to locally registered users */
	TMap<int32, FUniqueNetIdPtr> UserIds;

	/** Ids mapped to locally registered users */
	TUniqueNetIdMap<TSharedRef<FUserOnlineAccountBeamable>> UserAccounts;

	/** True if it should fail faked network queries and act like an offline system */
	bool bForceOfflineMode = false;


	/**
	 * Called after the beamable user login flow is completed, but not the Online Identity one.
	 * This will create a FUniqueNetId map id and map it to a user slot by using the LocalIndexNum as an index into UBeamCoreSettings::RuntimeUserSlots.
	 * It'll then fetch additional account information, such as stats and create the FUserOnlineAccountBeamable instance for this user. 
	 */
	void OnBeamableLoginOperationComplete(FBeamOperationEvent Evt, FOnlineAccountCredentials AccountCredentials);

	/**
	 * Stores a reference to the OnUserReady hook we tie as we are logged in so we can remove it after we are done logging in. 
	 */
	FDelegateHandle OnUserReadyCodeHandle;

	/**
	 *  Delegate we bind to UBeamRuntime::OnUserReadyCode so that we can react to the newly logged user when Beamable is ready for use.
	 *  This contains the OnBeamableUserReadyHook.
	 */
	void OnBeamableUserReady(const FUserSlot& Slot, TSharedPtr<FUserOnlineAccountBeamable> UserAccountPtr);

	// !!! PUBLIC HOOKS !!!
public:
	/**
	 * This hook is called after Beamable is ready for use but before we trigger the IOnlineSubsystem's TriggerOnLoginCompleteDelegates with success.
	 * Use this to add calls to your own microservice or other Beamable services from your setup files in Customer.
	 */
	TArray<FOnBeamableReadyIdentityHook> OnBeamableUserReadyHook;
};

typedef TSharedPtr<FOnlineIdentityBeamable, ESPMode::ThreadSafe> FOnlineIdentityBeamablePtr;
